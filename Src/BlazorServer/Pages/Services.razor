@page "/services"
@using Dilan.GrpcServiceDiscovery.BlazorServer.Data
@using Dilan.GrpcServiceDiscovery.Grpc
@inject ServiceDiscoveryService Service

<PageTitle>Services</PageTitle>

<h1>Services lists</h1>
<p>This table shows real time status of registered clients.</p>

<p>Click here to clean offline services.
    <button @onclick="ClearOffline">
        Clear
    </button>
</p>

<table class="table">
    <thead>
    <tr>
        <th>Service Name</th>
        <th>Address</th>
        <th>Port</th>
        <th>Scope</th>
        <th>Heath</th>
        <th>Metadata</th>
        <th>Last Update</th>
        <th>Enabled</th>
    </tr>
    </thead>
    <tbody>
    
    <tr>
        <td><InputText style="width: 150px;" id="serviceFilter" @bind-Value="_serviceNameFilter" @onchange="NameChanged" placeholder="Service Name Filter"></InputText></td>
        <td><InputText style="width: 150px;" id="addressFilter" @bind-Value="_addressFilter" @onchange="NameChanged" placeholder="Address Filter"></InputText></td>
        <td><InputText style="width: 100px;" id="portFilter" @bind-Value="_portFilter" @onchange="NameChanged" placeholder="Port Filter"></InputText></td>
        <td><InputText style="width: 100px;" id="scopeFilter" @bind-Value="_scopeFilter" @onchange="NameChanged" placeholder="Scope Filter"></InputText></td>
        <td><InputText style="width: 100px;" id="healthFilter" @bind-Value="_healthFilter" @onchange="NameChanged" placeholder="Health Filter"></InputText></td>
        <td><InputText id="metaFilter" @bind-Value="_metaFilter" @onchange="NameChanged" placeholder="Metadata Filter"></InputText></td>
        <td></td>
        <td></td>
    </tr>

        @foreach (var item in FilteredServiceList)
    {
        <tr style="background: @GetColorFromEnabled(item)">
            <td>@item.ServiceName</td>
            <td>@item.Address</td>
            <td>@item.Port</td>
            <td>@item.Scope</td>
            <td style="background: @GetColorFromHealthState(item)">@item.HealthState</td>
            <td><pre>@GetStringMetadata(item)</pre></td>
            <td>@item.LastRefreshTime.LocalDateTime</td>
            <td><input type="checkbox" @bind="@item.Enabled"></td>
        </tr>
    }
    </tbody>
</table>

@code {

    private string _serviceNameFilter = string.Empty;
    private string _addressFilter= string.Empty;
    private string _portFilter = string.Empty;
    private string _scopeFilter = string.Empty;
    private string _healthFilter = string.Empty;
    private string _metaFilter = string.Empty;
    private List<ServiceModel> FilteredServiceList = new List<ServiceModel>();


    protected override Task OnInitializedAsync()
    {
        Service.ServiceModelListChanged += ServiceOnServiceModelListChanged;
        return Task.CompletedTask;
    }

    private string GetStringMetadata(ServiceModel model)
    {
        return string.Join("\n", model.Metadata);
    }

    private string GetColorFromHealthState(ServiceModel model)
    {
        switch (model.HealthState)
        {
            case EnumServiceHealth.Healthy:
                return "lightgreen";
            case EnumServiceHealth.Unhealthy:
                return "lightred";
            case EnumServiceHealth.Offline:
                return "gray";
            case EnumServiceHealth.Starting:
                return "lightyellow";

            default:
                return "white";
        }
    }

    private void UpdateList()
    {
        var initial = Service.ServiceDictionary.Values.AsEnumerable();

        if (_serviceNameFilter != "")
        {
            initial = initial.Where(n => n.ServiceName.Contains(_serviceNameFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_addressFilter != "")
        {
            initial = initial.Where(n => n.Address != null && n.Address.Contains(_addressFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_portFilter != "")
        {
            initial = initial.Where(n => n.Port.ToString().Contains(_portFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_scopeFilter != "")
        {
            initial = initial.Where(n => n.Scope.ToString().Contains(_scopeFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_healthFilter != "")
        {
            initial = initial.Where(n => n.HealthState.ToString().Contains(_healthFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_metaFilter != "")
        {
            initial = initial.Where(n => string.Join(',', n.Metadata).Contains(_metaFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        FilteredServiceList = initial.ToList();
    }

    private string GetColorFromEnabled(ServiceModel model)
    {
        return model.Enabled ? "white" : "lightgray";
    }

    private void ServiceOnServiceModelListChanged(object? sender, EventArgs e)
    {
        // Tell web to update.
        UpdateList();
        InvokeAsync(StateHasChanged);
    }

    private void ClearOffline()
    {
        Service.Clear();
    }

    private void NameChanged()
    {
        UpdateList();
        InvokeAsync(StateHasChanged);
    }

}
